{% extends 'base.html.twig' %}


{% form_theme form _self %}

{% block string_widget %}
	<div class="text_widget">
		{% set type = type|default('number') %}
		{{ block('form_widget_simple') }}
	</div>
{% endblock %}

{% block form_widget_simple %}
	{% set type = type|default('text') %}
	<input
			type="{{ type }}" {{ block('widget_attributes') }} {% if value is not empty %}value="{{ value }}" {% endif %}/>
{% endblock %}

{% block form_errors %}
	{% if(errors|length) %}
		<div class="ui error message">
			<div class="header">Fehler</div>
			{% for error in errors %}
				<p>{{ error.message }}</p>
			{% endfor %}
		</div>
	{% endif %}
{% endblock %}


{% block _form_ingredients_entry_widget %}
	<div class="ui icon input">
		{{ form_widget(form.label) }}
		<i class="link times red icon remove-row"></i>
	</div>
{% endblock %}

{% block content %}

	<h1 class="ui center aligned header">Rezept anlegen</h1>

	<div class="ui segment">

		{{ form_start(form) }}
		{{ form_errors(form) }}
		<div class="ui form error">
			<div class="two fields">
				<div class="field">
					<label>URL</label>
					<div class="ui fluid icon input">
						<input placeholder="URL..." type="text" name="{{ form.originUrl.vars.full_name }}"
							   value="{{ form.originUrl.vars.value }}">
						<i class="icon search"></i>
					</div>
				</div>
				<div class="field">
					<label><i class="tags icon"></i> Tags</label>
					<div class="ui fluid right labeled left icon input">
						{{ form_errors(form.tagsString) }}
						{{ form_widget(form.tagsString) }}
					</div>
				</div>
			</div>
			<div class="fields">
				<div class="four wide field ingredients">
					{{ form_label(form.ingredients) }}
					{{ form_errors(form.ingredients) }}
					{{ form_widget(form.ingredients) }}

					<a class="add-collection-item small ui button" data-list="#{{ form.ingredients.vars.id }}" href="#">
						<i class="plus icon"></i> Weitere Zutat
					</a>
				</div>
				<div class="eight wide field">
					{{ form_label(form.label) }}
					{{ form_errors(form.label) }}
					{{ form_widget(form.label) }}

					{{ form_label(form.effort) }}
					{{ form_errors(form.effort) }}
					<div class="ui right labeled input">
						<input placeholder="Aufwand in Minuten" type="number"
							   name="{{ form.effort.vars.full_name }}"
							   value="{{ form.effort.vars.value }}"
							   min="0"
							   required>
						<div class="ui basic label"> Minuten</div>
					</div>

					{{ form_label(form.description) }}
					{{ form_errors(form.description) }}
					{{ form_widget(form.description) }}
				</div>
				<div class="six wide field rec-images-container">

					{{ form_label(form.files) }}
					{{ form_errors(form.files) }}
					{{ form_widget(form.files) }}

					<div class="field">
						<div class="gallery ui three column grid">
							<div class="column"><img src="" /></div>
						</div>
					</div>

					<label>Remote Bilder</label>
					<div class="ui three column grid rec-images"></div>

					<label>Vorhandene Bilder</label>
					<div class="ui three column grid rec-images">
						{% for image in recipe.images %}
							<div class="column active">
								{% if image.localFileName %}
									<img src="{{ asset(upload_directory~'/'~image.localFileName) }}"/>
								{% else %}
									<img src="{{ image.url }}"/>
								{% endif %}
								<i class="white check circle icon"></i>
								<input type="hidden" name="existingImages[]" value="{{ image.id }}"/>
							</div>
						{% endfor %}

					</div>
				</div>
			</div>
			<button class="ui button" type="submit">Submit</button>

		</div>

		{{ form_end(form, {'render_rest': false}) }}
	</div>

	<script type="text/javascript">
		$(function () {

			var fetchUrl = '{{ path('parseRecipeUrl') }}';
			var urlInput = $('input[name*="Url"]');

			urlInput.on('paste', function () {
				setTimeout(function () {
					urlInput.closest('.input').addClass('loading');
					$.get(fetchUrl, {url: urlInput.val()}, function (response) {
						console.info(response);
						$('#form_label').val(response.title);
						$('#form_description').val(response.description);

						clearIngredients();
						response.ingredients.forEach(function (ingredient) {
							addIngredient(ingredient.amount + ' ' + ingredient.label);
						});

						response.images.forEach(function (imgUrl) {
							if (!imgUrl) {
								return;
							}

							var input = '<input type="hidden" name="images[]" value="' + imgUrl + '" disabled>';
							var toggleIcon = '<i class="white check circle icon">';
							$('.rec-images.grid').append('<div class="column"><img src="' + imgUrl + '" />' + input + toggleIcon + '</div>');
						});

						urlInput.closest('.input').removeClass('loading');
					});

				}, 0);
			});

			$('body').on('click', '.rec-images.grid img', function () {
				var $input = $(this).closest('.column').find('input');
				$(this).closest('.column').toggleClass('active');

				if ($input.attr('disabled'))
					$input.removeAttr('disabled');
				else
					$input.attr('disabled', 'disabled');
			});

			$('#form_tagsString').selectize({
				delimiter: ',',
				persist: false,
				options: {{ existingTags|json_encode|raw }},
				create: function (input) {
					return {
						value: input,
						text: input
					}
				}
			});

			function clearIngredients() {
				$('.ingredients [data-prototype]').empty();
			}

			function addIngredient(value) {
				var $list = $('.ingredients [data-prototype]');
				var counter = $list.data('widget-counter') | $list.children().length;
				if (!counter) {
					counter = $list.children().length;
				}

				var newWidget = $list.attr('data-prototype');
				newWidget = newWidget.replace(/__name__/g, counter);
				counter++;
				$list.data(' widget-counter', counter);

				var tags = $list.attr('data-widget-tags') || '<div></div>';
				var newElem = $(tags).html(newWidget);

				newElem.find('input').val(value);
				newElem.appendTo($list);
			}

			$('.add-collection-item').click(function (e) {
				e.preventDefault();
				addIngredient();
			});

			$('body').on('keydown', '.ingredients input', function () {
				if ($(this).is('.ingredients input:last')) {
					addIngredient();
				}
			});

			$('body').on('click', '.remove-row', function (e) {
				e.preventDefault();
				$(this).closest('div').remove();
			});


			// Multiple images preview in browser
			var imagesPreview = function (input, placeToInsertImagePreview) {
				if (input.files) {
					var filesAmount = input.files.length;
					for (var i = 0; i < filesAmount; i++) {
						var reader = new FileReader();
						reader.onload = function (event) {
							$('<div class="column"><img src="' + event.target.result + '"></div>').appendTo(placeToInsertImagePreview);
						};
						reader.readAsDataURL(input.files[i]);
					}
				}

			};

			$('#form_files').on('change', function () {
				imagesPreview(this, 'div.gallery');
			});
		});
	</script>
	<style type="text/css">
		.selectize-control {
			width: 100%;
		}

		.gallery.ui.grid {
			margin-top:auto;
			margin-bottom:auto;
		}

		.gallery img {
			max-width: 100%;
		}

		.ingredients .button {
			margin-top: 10px;
		}
	</style>

{% endblock %}
